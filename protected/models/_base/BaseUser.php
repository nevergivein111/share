<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property integer $id
 * @property string $email
 * @property string $password
 * @property string $firstname
 * @property string $lastname
 * @property string $image
 * @property string $gender
 * @property string $birthday
 * @property string $auth_token
 * @property integer $status
 * @property integer $is_deleted
 * @property string $delete_date
 * @property string $role
 * @property string $last_login
 * @property string $create_date
 * @property string $update_date
 *
 * @property Follow[] $follows
 * @property Follow[] $follows1
 * @property Message[] $messages
 * @property MessageToUser[] $messageToUsers
 * @property ReviewComment[] $reviewComments
 * @property ReviewProduct[] $reviewProducts
 * @property ViewProduct[] $viewProducts
 * @property ViewReview[] $viewReviews
 * @property ViewSocial[] $viewSocials
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'email';
	}

	public function rules() {
		return array(
			array('email, firstname, lastname, role', 'required'),
			array('status, is_deleted', 'numerical', 'integerOnly'=>true),
			array('email, firstname, lastname, gender, birthday, role', 'length', 'max'=>50),
			array('password', 'length', 'max'=>128),
			array('image, auth_token', 'length', 'max'=>100),
			array('delete_date, last_login, create_date, update_date', 'safe'),
			array('password, image, gender, birthday, auth_token, status, is_deleted, delete_date, last_login, create_date, update_date', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, email, password, firstname, lastname, image, gender, birthday, auth_token, status, is_deleted, delete_date, role, last_login, create_date, update_date', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'follows' => array(self::HAS_MANY, 'Follow', 'follower_id','condition'=>'(SELECT is_deleted FROM `user` where id=follows.follower_id) = 0'),
			'follows1' => array(self::HAS_MANY, 'Follow', 'following_id','condition'=>'(SELECT is_deleted FROM `user` where id=follows1.following_id) = 0 '),
			'messages' => array(self::HAS_MANY, 'Message', 'user_id'),
			'messageToUsers' => array(self::HAS_MANY, 'MessageToUser', 'user_id'),
			'reviewComments' => array(self::HAS_MANY, 'ReviewComment', 'user_id'),
			'reviewProducts' => array(self::HAS_MANY, 'ReviewProduct', 'user_id'),
			'viewProducts' => array(self::HAS_MANY, 'ViewProduct', 'user_id'),
			'viewReviews' => array(self::HAS_MANY, 'ViewReview', 'user_id'),
			'viewSocials' => array(self::HAS_MANY, 'ViewSocial', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'email' => Yii::t('app', 'Email'),
			'password' => Yii::t('app', 'Password'),
			'firstname' => Yii::t('app', 'First Name'),
			'lastname' => Yii::t('app', 'Last Name'),
			'image' => Yii::t('app', 'Image'),
			'gender' => Yii::t('app', 'Gender'),
			'birthday' => Yii::t('app', 'Birthday'),
			'auth_token' => Yii::t('app', 'Auth Token'),
			'status' => Yii::t('app', 'Status'),
			'is_deleted' => Yii::t('app', 'Is Deleted'),
			'delete_date' => Yii::t('app', 'Delete Date'),
			'role' => Yii::t('app', 'Role'),
			'last_login' => Yii::t('app', 'Last Login'),
			'create_date' => Yii::t('app', 'Create Date'),
			'update_date' => Yii::t('app', 'Update Date'),
			'follows' => null,
			'follows1' => null,
			'messages' => null,
			'messageToUsers' => null,
			'reviewComments' => null,
			'reviewProducts' => null,
			'viewProducts' => null,
			'viewReviews' => null,
			'viewSocials' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('firstname', $this->firstname, true);
		$criteria->compare('lastname', $this->lastname, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('gender', $this->gender, true);
		$criteria->compare('birthday', $this->birthday, true);
		$criteria->compare('auth_token', $this->auth_token, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('is_deleted', $this->is_deleted);
		$criteria->compare('delete_date', $this->delete_date, true);
		$criteria->compare('role', $this->role, true);
		$criteria->compare('last_login', $this->last_login, true);
		$criteria->compare('create_date', $this->create_date, true);
		$criteria->compare('update_date', $this->update_date, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}