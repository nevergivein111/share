<?php

/**
 * This is the model base class for the table "category".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Category".
 *
 * Columns in table "category" available as properties of the model,
 * followed by relations of table "category" available as properties of the model.
 *
 * @property integer $id
 * @property integer $category_id
 * @property integer $combine_category_id
 * @property string $name
 * @property string $alias
 * @property string $image
 * @property integer $status
 * @property integer $ordering
 * @property integer $is_deleted
 * @property string $delete_date
 * @property string $create_date
 * @property string $update_Date
 *
 * @property Category $combineCategory
 * @property Category[] $categories
 * @property Category $category
 * @property Category[] $categories1
 * @property Component[] $components
 * @property Product[] $products
 * @property Product[] $products1
 */
abstract class BaseCategory extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'category';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Category|Categories', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, status', 'required'),
			array('category_id, combine_category_id, status, ordering, is_deleted', 'numerical', 'integerOnly'=>true),
			array('name, image', 'length', 'max'=>100),
			array('alias', 'length', 'max'=>255),
			array('delete_date, create_date, update_Date', 'safe'),
			array('category_id, combine_category_id, alias, image, ordering, is_deleted, delete_date, create_date, update_Date', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, category_id, combine_category_id, name, alias, image, status, ordering, is_deleted, delete_date, create_date, update_Date', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'combineCategory' => array(self::BELONGS_TO, 'Category', 'combine_category_id'),
			'categories' => array(self::HAS_MANY, 'Category', 'combine_category_id'),
			'category' => array(self::BELONGS_TO, 'Category', 'category_id'),
			'categories1' => array(self::HAS_MANY, 'Category', 'category_id'),
			'components' => array(self::HAS_MANY, 'Component', 'category_id'),
			'products'  => array(self::HAS_MANY, 'Product', 'category_id'),
			'products1' => array(self::HAS_MANY, 'Product', 'sub_category_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'category_id' => null,
			'combine_category_id' => null,
			'name' => Yii::t('app', 'Name'),
			'alias' => Yii::t('app', 'Alias'),
			'image' => Yii::t('app', 'Image'),
			'status' => Yii::t('app', 'Status'),
			'ordering' => Yii::t('app', 'Ordering'),
			'is_deleted' => Yii::t('app', 'Is Deleted'),
			'delete_date' => Yii::t('app', 'Delete Date'),
			'create_date' => Yii::t('app', 'Create Date'),
			'update_Date' => Yii::t('app', 'Update Date'),
			'combineCategory' => null,
			'categories' => null,
			'category' => null,
			'categories1' => null,
			'components' => null,
			'products' => null,
			'products1' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('category_id', $this->category_id);
		$criteria->compare('combine_category_id', $this->combine_category_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('alias', $this->alias, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('ordering', $this->ordering);
		$criteria->compare('is_deleted', $this->is_deleted);
		$criteria->compare('delete_date', $this->delete_date, true);
		$criteria->compare('create_date', $this->create_date, true);
		$criteria->compare('update_Date', $this->update_Date, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}